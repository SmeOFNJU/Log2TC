        -:    0:Source:schedule.c
        -:    0:Graph:schedule.gcno
        -:    0:Data:schedule.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*  -*- Last-Edit:  Wed May 7 10:12:52 1993 by Monica; -*- */
        -:    2:
        -:    3:
        -:    4:#include <stdio.h>
        -:    5:#include <stdlib.h>
        -:    6:
        -:    7:/* A job descriptor. */
        -:    8:
        -:    9://#define NULL 0
        -:   10:
        -:   11:
        -:   12:#define NEW_JOB        1
        -:   13:#define UPGRADE_PRIO   2 
        -:   14:#define BLOCK          3
        -:   15:#define UNBLOCK        4  
        -:   16:#define QUANTUM_EXPIRE 5
        -:   17:#define FINISH         6
        -:   18:#define FLUSH          7
        -:   19:
        -:   20:#define MAXPRIO 3
        -:   21:
        -:   22:typedef struct _job {
        -:   23:    struct  _job *next, *prev; /* Next and Previous in job list. */
        -:   24:    int          val  ;         /* Id-value of program. */
        -:   25:    short        priority;     /* Its priority. */
        -:   26:} Ele, *Ele_Ptr;
        -:   27:
        -:   28:typedef struct list		/* doubly linked list */
        -:   29:{
        -:   30:  Ele *first;
        -:   31:  Ele *last;
        -:   32:  int    mem_count;		/* member count */
        -:   33:} List;
        -:   34:
        -:   35:/*-----------------------------------------------------------------------------
        -:   36:  new_ele
        -:   37:     alloates a new element with value as num.
        -:   38:-----------------------------------------------------------------------------*/
function new_ele called 9 returned 100% blocks executed 100%
        9:   39:Ele* new_ele(new_num) 
        9:   39-block  0
        -:   40:int new_num;
        -:   41:{	
        -:   42:    Ele *ele;
        -:   43:
        9:   44:    ele =(Ele *)malloc(sizeof(Ele));
        9:   45:    ele->next = NULL;
        9:   46:    ele->prev = NULL;
        9:   47:    ele->val  = new_num;
        9:   48:    return ele;
        9:   48-block  0
        -:   49:}
        -:   50:
        -:   51:/*-----------------------------------------------------------------------------
        -:   52:  new_list
        -:   53:        allocates, initializes and returns a new list.
        -:   54:        Note that if the argument compare() is provided, this list can be
        -:   55:            made into an ordered list. see insert_ele().
        -:   56:-----------------------------------------------------------------------------*/
function new_list called 4 returned 100% blocks executed 100%
        4:   57:List *new_list()
        4:   57-block  0
        -:   58:{
        -:   59:    List *list;
        -:   60:
        4:   61:    list = (List *)malloc(sizeof(List));
        -:   62:    
        4:   63:    list->first = NULL;
        4:   64:    list->last  = NULL;
        4:   65:    list->mem_count = 0;
        4:   66:    return (list);
        4:   66-block  0
        -:   67:}
        -:   68:
        -:   69:/*-----------------------------------------------------------------------------
        -:   70:  append_ele
        -:   71:        appends the new_ele to the list. If list is null, a new
        -:   72:	list is created. The modified list is returned.
        -:   73:-----------------------------------------------------------------------------*/
function append_ele called 15 returned 100% blocks executed 100%
       15:   74:List *append_ele(a_list, a_ele)
       15:   74-block  0
        -:   75:List *a_list;
        -:   76:Ele  *a_ele;
        -:   77:{
       15:   78:  if (!a_list)
       15:   78-block  0
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        1:   79:      a_list = new_list();	/* make list without compare function */
        1:   79-block  0
call    0 returned 100%
        -:   80:
       15:   81:  a_ele->prev = a_list->last;	/* insert at the tail */
       15:   82:  if (a_list->last)
       15:   82-block  0
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
        6:   83:    a_list->last->next = a_ele;
        6:   83-block  0
        -:   84:  else
        9:   85:    a_list->first = a_ele;
        9:   85-block  0
       15:   86:  a_list->last = a_ele;
       15:   87:  a_ele->next = NULL;
       15:   88:  a_list->mem_count++;
       15:   89:  return (a_list);
       15:   89-block  0
        -:   90:}
        -:   91:
        -:   92:/*-----------------------------------------------------------------------------
        -:   93:  find_nth
        -:   94:        fetches the nth element of the list (count starts at 1)
        -:   95:-----------------------------------------------------------------------------*/
function find_nth called 3 returned 100% blocks executed 88%
        3:   96:Ele *find_nth(f_list, n)
        3:   96-block  0
        -:   97:List *f_list;
        -:   98:int   n;
        -:   99:{
        -:  100:    Ele *f_ele;
        -:  101:    int i;
        -:  102:
        3:  103:    if (!f_list)
        3:  103-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  104:	return NULL;
    $$$$$:  104-block  0
        3:  105:    f_ele = f_list->first;
        6:  106:    for (i=1; f_ele && (i<n); i++)
        3:  106-block  0
        3:  106-block  1
        6:  106-block  2
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
        5:  106-block  3
branch  2 taken 60%
branch  3 taken 40% (fallthrough)
        3:  107:	f_ele = f_ele->next;
        3:  108:    return f_ele;
        3:  108-block  0
        -:  109:}
        -:  110:
        -:  111:/*-----------------------------------------------------------------------------
        -:  112:  del_ele
        -:  113:        deletes the old_ele from the list.
        -:  114:        Note: even if list becomes empty after deletion, the list
        -:  115:	      node is not deallocated.
        -:  116:-----------------------------------------------------------------------------*/
function del_ele called 14 returned 100% blocks executed 82%
       14:  117:List *del_ele(d_list, d_ele)
       14:  117-block  0
        -:  118:List *d_list;
        -:  119:Ele  *d_ele;
        -:  120:{
       14:  121:    if (!d_list || !d_ele)
       14:  121-block  0
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       14:  121-block  1
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  122:	return (NULL);
    $$$$$:  122-block  0
        -:  123:    
       14:  124:    if (d_ele->next)
       14:  124-block  0
branch  0 taken 43% (fallthrough)
branch  1 taken 57%
        6:  125:	d_ele->next->prev = d_ele->prev;
        6:  125-block  0
        -:  126:    else
        8:  127:	d_list->last = d_ele->prev;
        8:  127-block  0
       14:  128:    if (d_ele->prev)
       14:  128-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  129:	d_ele->prev->next = d_ele->next;
    $$$$$:  129-block  0
        -:  130:    else
       14:  131:	d_list->first = d_ele->next;
       14:  131-block  0
        -:  132:    /* KEEP d_ele's data & pointers intact!! */
       14:  133:    d_list->mem_count--;
       14:  134:    return (d_list);
       14:  134-block  0
        -:  135:}
        -:  136:
        -:  137:/*-----------------------------------------------------------------------------
        -:  138:   free_ele
        -:  139:       deallocate the ptr. Caution: The ptr should point to an object
        -:  140:       allocated in a single call to malloc.
        -:  141:-----------------------------------------------------------------------------*/
function free_ele called 8 returned 100% blocks executed 100%
        8:  142:void free_ele(ptr)
        8:  142-block  0
        -:  143:Ele *ptr;
        -:  144:{
        8:  145:    free(ptr);
        8:  146:}
        -:  147:
        -:  148:int alloc_proc_num;
        -:  149:int num_processes;
        -:  150:Ele* cur_proc;
        -:  151:List *prio_queue[MAXPRIO+1]; 	/* 0th element unused */
        -:  152:List *block_queue;
        -:  153:
        -:  154:void
function finish_process called 11 returned 100% blocks executed 100%
       11:  155:finish_process()
       11:  155-block  0
        -:  156:{
       11:  157:    schedule();
       11:  157-block  0
call    0 returned 100%
       11:  158:    if (cur_proc)
branch  0 taken 73% (fallthrough)
branch  1 taken 27%
        -:  159:    {
        8:  160:	fprintf(stdout, "%d ", cur_proc->val);
        8:  160-block  0
call    0 returned 100%
        8:  161:	free_ele(cur_proc);
call    0 returned 100%
        8:  162:	num_processes--;
        -:  163:    }
       11:  164:}
        -:  165:
        -:  166:void
function finish_all_processes called 3 returned 100% blocks executed 100%
        3:  167:finish_all_processes()
        3:  167-block  0
        -:  168:{
        -:  169:    int i;
        -:  170:    int total;
        3:  171:    total = num_processes;
       13:  172:    for (i=0; i<total; i++)
        3:  172-block  0
       13:  172-block  1
branch  0 taken 77%
branch  1 taken 23% (fallthrough)
       10:  173:	finish_process();
       10:  173-block  0
call    0 returned 100%
        3:  174:}
        -:  175:
function schedule called 16 returned 100% blocks executed 100%
       16:  176:schedule()
       16:  176-block  0
        -:  177:{
        -:  178:    int i;
        -:  179:    
       16:  180:    cur_proc = NULL;
       38:  181:    for (i=MAXPRIO; i > 0; i--)
       16:  181-block  0
       22:  181-block  1
       38:  181-block  2
branch  0 taken 89%
branch  1 taken 11% (fallthrough)
        -:  182:    {
       34:  183:	if (prio_queue[i]->mem_count > 0)
       34:  183-block  0
branch  0 taken 35% (fallthrough)
branch  1 taken 65%
        -:  184:	{
       12:  185:	    cur_proc = prio_queue[i]->first;
       12:  186:	    prio_queue[i] = del_ele(prio_queue[i], cur_proc);
       12:  186-block  0
call    0 returned 100%
       12:  187:	    return;
        -:  188:	}
        -:  189:    }
        -:  190:}
        -:  191:
        -:  192:void
function upgrade_process_prio called 1 returned 100% blocks executed 63%
        1:  193:upgrade_process_prio(prio, ratio)
        1:  193-block  0
        -:  194:int prio;
        -:  195:float ratio;
        -:  196:{
        -:  197:    int count;
        -:  198:    int n;
        -:  199:    Ele *proc;
        -:  200:    List *src_queue, *dest_queue;
        -:  201:    
        1:  202:    if (prio >= MAXPRIO)
        1:  202-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  203:	return;
    $$$$$:  203-block  0
        1:  204:    src_queue = prio_queue[prio];
        1:  205:    dest_queue = prio_queue[prio+1];
        1:  206:    count = src_queue->mem_count;
        -:  207:
        1:  208:    if (count > 0)
        1:  208-block  0
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  209:    {
        1:  210:	n = (int) (count*ratio + 1);
        1:  211:	proc = find_nth(src_queue, n);
        1:  211-block  0
call    0 returned 100%
        1:  212:	if (proc) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  213:	    src_queue = del_ele(src_queue, proc);
    $$$$$:  213-block  0
call    0 never executed
        -:  214:	    /* append to appropriate prio queue */
    #####:  215:	    proc->priority = prio;
    #####:  216:	    dest_queue = append_ele(dest_queue, proc);
call    0 never executed
        -:  217:	}
        -:  218:    }
        -:  219:}
        -:  220:
        -:  221:void
function unblock_process called 2 returned 100% blocks executed 100%
        2:  222:unblock_process(ratio)
        2:  222-block  0
        -:  223:float ratio;
        -:  224:{
        -:  225:    int count;
        -:  226:    int n;
        -:  227:    Ele *proc;
        -:  228:    int prio;
        2:  229:    if (block_queue)
        2:  229-block  0
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  230:    {
        2:  231:	count = block_queue->mem_count;
        2:  232:	n = (int) (count*ratio + 1);
        2:  233:	proc = find_nth(block_queue, n);
        2:  233-block  0
call    0 returned 100%
        2:  234:	if (proc) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:  235:	    block_queue = del_ele(block_queue, proc);
        2:  235-block  0
call    0 returned 100%
        -:  236:	    /* append to appropriate prio queue */
        2:  237:	    prio = proc->priority;
        2:  238:	    prio_queue[prio] = append_ele(prio_queue[prio], proc);
call    0 returned 100%
        -:  239:	}
        -:  240:    }
        2:  241:}
        -:  242:
function quantum_expire called 1 returned 100% blocks executed 100%
        1:  243:void quantum_expire()
        1:  243-block  0
        -:  244:{
        -:  245:    int prio;
        1:  246:    schedule();
        1:  246-block  0
call    0 returned 100%
        1:  247:    if (cur_proc)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  248:    {
        1:  249:	prio = cur_proc->priority;
        1:  250:	prio_queue[prio] = append_ele(prio_queue[prio], cur_proc);
        1:  250-block  0
call    0 returned 100%
        -:  251:    }	
        1:  252:}
        -:  253:	
        -:  254:void
function block_process called 4 returned 100% blocks executed 100%
        4:  255:block_process()
        4:  255-block  0
        -:  256:{
        4:  257:    schedule();
        4:  257-block  0
call    0 returned 100%
        4:  258:    if (cur_proc)
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        -:  259:    {
        3:  260:	block_queue = append_ele(block_queue, cur_proc);
        3:  260-block  0
call    0 returned 100%
        -:  261:    }
        4:  262:}
        -:  263:
function new_process called 9 returned 100% blocks executed 100%
        9:  264:Ele * new_process(prio)
        9:  264-block  0
        -:  265:int prio;
        -:  266:{
        -:  267:    Ele *proc;
        9:  268:    proc = new_ele(alloc_proc_num++);
        9:  268-block  0
call    0 returned 100%
        9:  269:    proc->priority = prio;
        9:  270:    num_processes++;
        9:  271:    return proc;
        -:  272:}
        -:  273:
function add_process called 1 returned 100% blocks executed 100%
        1:  274:void add_process(prio)
        1:  274-block  0
        -:  275:int prio;
        -:  276:{
        -:  277:    Ele *proc;
        1:  278:    proc = new_process(prio);
        1:  278-block  0
call    0 returned 100%
        1:  279:    prio_queue[prio] = append_ele(prio_queue[prio], proc);
call    0 returned 100%
        1:  280:}
        -:  281:
function init_prio_queue called 3 returned 100% blocks executed 100%
        3:  282:void init_prio_queue(prio, num_proc)
        3:  282-block  0
        -:  283:int prio;
        -:  284:int num_proc;
        -:  285:{
        -:  286:    List *queue;
        -:  287:    Ele  *proc;
        -:  288:    int i;
        -:  289:    
        3:  290:    queue = new_list();
        3:  290-block  0
call    0 returned 100%
       11:  291:    for (i=0; i<num_proc; i++)
       11:  291-block  0
branch  0 taken 73%
branch  1 taken 27% (fallthrough)
        -:  292:    {
        8:  293:	proc = new_process(prio);
        8:  293-block  0
call    0 returned 100%
        8:  294:	queue = append_ele(queue, proc);
call    0 returned 100%
        -:  295:    }
        3:  296:    prio_queue[prio] = queue;
        3:  297:}
        -:  298:
function initialize called 1 returned 100% blocks executed 100%
        1:  299:void initialize()
        1:  299-block  0
        -:  300:{
        1:  301:    alloc_proc_num = 0;
        1:  302:    num_processes = 0;
        1:  303:}
        -:  304:				
        -:  305:/* test driver */
function main called 1 returned 100% blocks executed 84%
        1:  306:main(argc, argv)
        1:  306-block  0
        -:  307:int argc;
        -:  308:char *argv[];
        -:  309:{
        -:  310:    int command;
        -:  311:    int prio;
        -:  312:    float ratio;
        -:  313:    int status;
        -:  314:
        1:  315:    if (argc < (MAXPRIO+1))
        1:  315-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  316:    {
    #####:  317:	fprintf(stdout, "incorrect usage\n");
    $$$$$:  317-block  0
call    0 never executed
    #####:  318:	return;
    $$$$$:  318-block  0
        -:  319:    }
        -:  320:    
        1:  321:    initialize();
        1:  321-block  0
call    0 returned 100%
        4:  322:    for (prio=MAXPRIO; prio >= 1; prio--)
        4:  322-block  0
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  323:    {
        3:  324:	init_prio_queue(prio, atoi(argv[prio]));
        3:  324-block  0
call    0 returned 100%
call    1 returned 100%
        -:  325:    }
       14:  326:    for (status = fscanf(stdin, "%d", &command);
        1:  326-block  0
call    0 returned 100%
       14:  326-block  1
branch  1 taken 93% (fallthrough)
branch  2 taken 7%
       14:  327:	 ((status!=EOF) && status);
       13:  327-block  0
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        1:  327-block  1
       13:  328:	 status = fscanf(stdin, "%d", &command))
       13:  328-block  0
call    0 returned 100%
        -:  329:    {
       13:  330:	switch(command)
       13:  330-block  0
branch  0 taken 8%
branch  1 taken 31%
branch  2 taken 8%
branch  3 taken 15%
branch  4 taken 8%
branch  5 taken 8%
branch  6 taken 23%
branch  7 taken 0%
        -:  331:	{
        -:  332:	case FINISH:
        1:  333:	    finish_process();
        1:  333-block  0
call    0 returned 100%
        1:  334:	    break;
        -:  335:	case BLOCK:
        4:  336:	    block_process();
        4:  336-block  0
call    0 returned 100%
        4:  337:	    break;
        -:  338:	case QUANTUM_EXPIRE:
        1:  339:	    quantum_expire();
        1:  339-block  0
call    0 returned 100%
        1:  340:	    break;
        -:  341:	case UNBLOCK:
        2:  342:	    fscanf(stdin, "%f", &ratio);
        2:  342-block  0
call    0 returned 100%
        2:  343:	    unblock_process(ratio);
call    0 returned 100%
        2:  344:	    break;
        -:  345:	case UPGRADE_PRIO:
        1:  346:	    fscanf(stdin, "%d", &prio);
        1:  346-block  0
call    0 returned 100%
        1:  347:	    fscanf(stdin, "%f", &ratio);
call    0 returned 100%
        1:  348:	    if (prio > MAXPRIO || prio <= 0) { 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  348-block  0
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  349:		fprintf(stdout, "** invalid priority\n");
    $$$$$:  349-block  0
call    0 never executed
    #####:  350:		return;
        -:  351:	    }
        -:  352:	    else 
        1:  353:		upgrade_process_prio(prio, ratio);
        1:  353-block  0
call    0 returned 100%
        1:  354:	    break;
        -:  355:	case NEW_JOB:
        1:  356:	    fscanf(stdin, "%d", &prio);
        1:  356-block  0
call    0 returned 100%
        1:  357:	    if (prio > MAXPRIO || prio <= 0) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  357-block  0
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  358:		fprintf(stdout, "** invalid priority\n");
    $$$$$:  358-block  0
call    0 never executed
    #####:  359:		return;
        -:  360:	    }
        -:  361:	    else 
        1:  362:		add_process(prio);
        1:  362-block  0
call    0 returned 100%
        1:  363:	    break;
        -:  364:	case FLUSH:
        3:  365:	    finish_all_processes();
        3:  365-block  0
call    0 returned 100%
        3:  366:	    break;
        -:  367:	}
        -:  368:    }
        -:  369:}
        -:  370:
        -:  371:/* A simple input spec:
        -:  372:  
        -:  373:  a.out n3 n2 n1
        -:  374:
        -:  375:  where n3, n2, n1 are non-negative integers indicating the number of
        -:  376:  initial processes at priority 3, 2, and 1, respectively.
        -:  377:
        -:  378:  The input file is a list of commands of the following kinds:
        -:  379:   (For simplicity, comamnd names are integers (NOT strings)
        -:  380:    
        -:  381:  FINISH            ;; this exits the current process (printing its number)
        -:  382:  NEW_JOB priority  ;; this adds a new process at specified priority
        -:  383:  BLOCK             ;; this adds the current process to the blocked queue
        -:  384:  QUANTUM_EXPIRE    ;; this puts the current process at the end
        -:  385:                    ;;      of its prioqueue
        -:  386:  UNBLOCK ratio     ;; this unblocks a process from the blocked queue
        -:  387:                    ;;     and ratio is used to determine which one
        -:  388:
        -:  389:  UPGRADE_PRIO small-priority ratio ;; this promotes a process from
        -:  390:                    ;; the small-priority queue to the next higher priority
        -:  391:                    ;;     and ratio is used to determine which process
        -:  392: 
        -:  393:  FLUSH	            ;; causes all the processes from the prio queues to
        -:  394:                    ;;    exit the system in their priority order
        -:  395:
        -:  396:where
        -:  397: NEW_JOB        1
        -:  398: UPGRADE_PRIO   2 
        -:  399: BLOCK          3
        -:  400: UNBLOCK        4  
        -:  401: QUANTUM_EXPIRE 5
        -:  402: FINISH         6
        -:  403: FLUSH          7
        -:  404:and priority is in        1..3
        -:  405:and small-priority is in  1..2
        -:  406:and ratio is in           0.0..1.0
        -:  407:
        -:  408: The output is a list of numbers indicating the order in which
        -:  409: processes exit from the system.   
        -:  410:
        -:  411:*/
        -:  412:
        -:  413:
