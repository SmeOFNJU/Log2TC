        -:    0:Source:print_tokens2.c
        -:    0:Graph:print_tokens2.gcno
        -:    0:Data:print_tokens2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/***********************************************/
        -:    2:/*  assgnment.5  Shu Z. A00042813 for CS453    */
        -:    3:/*  using the tokenizer and stream module      */
        -:    4:/*  print_tokens.c Code                        */
        -:    5:/***********************************************/
        -:    6:
        -:    7:/***********************************************/
        -:    8:/* NAME:	print_tokens                   */
        -:    9:/* INPUT:	a filename                     */
        -:   10:/* OUTPUT:      print out the token stream     */
        -:   11:/* DESCRIPTION: using the tokenizer interface  */
        -:   12:/*              to print out the token stream  */
        -:   13:/***********************************************/
        -:   14:#include <stdio.h>
        -:   15:#include <ctype.h>
        -:   16:#include <string.h>
        -:   17:#include <stdlib.h>
        -:   18:#include "tokens.h"
        -:   19:#define TRUE 1
        -:   20:#define FALSE 0
        -:   21:
function main called 1 returned 0% blocks executed 33%
        1:   22:main(argc,argv)
        1:   22-block  0
        -:   23:int argc;
        -:   24:char *argv[3];
        -:   25:{  char *fname;
        -:   26:   token tok;
        -:   27:   token_stream tp;
        1:   28:     if(argc==1)                  /* if not given filename,take as '""' */
        1:   28-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   29:       {
    #####:   30:        fname= (char *) malloc(sizeof(char));
    #####:   31:        *fname = '\0';
    $$$$$:   31-block  0
        -:   32:       }
        1:   33:     else if(argc==2)
        1:   33-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   34:        fname= argv[1];
    $$$$$:   34-block  0
        -:   35:     else
        1:   36:       { fprintf(stdout, "Error!,please give the token stream\n");
        1:   36-block  0
call    0 returned 100%
        1:   37:         exit(0);
call    0 returned 0%
        -:   38:       }
    #####:   39:    tp=open_token_stream(fname);  /* open token stream */
    $$$$$:   39-block  0
call    0 never executed
    #####:   40:    tok=get_token(tp);
call    0 never executed
    #####:   41:    while (is_eof_token(tok) ==FALSE) /* take one token each time until eof */
    $$$$$:   41-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   42:    {
    #####:   43:       print_token(tok);
    $$$$$:   43-block  0
call    0 never executed
    #####:   44:       tok=get_token(tp);
call    0 never executed
        -:   45:    }
    #####:   46:    print_token(tok); /* print eof signal */
    $$$$$:   46-block  0
call    0 never executed
    #####:   47:    exit(0);
        -:   48:}
        -:   49:
        -:   50:/* stream.c code */
        -:   51:
        -:   52:/***********************************************/
        -:   53:/* NMAE:	open_character_stream          */
        -:   54:/* INPUT:       a filename                     */
        -:   55:/* OUTPUT:      a pointer to chacracter_stream */
        -:   56:/* DESCRIPTION: when not given a filename,     */
        -:   57:/*              open stdin,otherwise open      */
        -:   58:/*              the existed file               */
        -:   59:/***********************************************/
function open_character_stream called 0 returned 0% blocks executed 0%
    #####:   60:character_stream open_character_stream(fname)
    $$$$$:   60-block  0
        -:   61:char *fname;
        -:   62:{ character_stream fp;
    #####:   63:  if(fname == NULL)
    $$$$$:   63-block  0
branch  0 never executed
branch  1 never executed
    #####:   64:     fp=stdin;
    $$$$$:   64-block  0
    #####:   65:  else if ((fp=fopen(fname,"r"))== NULL)
    $$$$$:   65-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   66:  {
    #####:   67:       fprintf(stdout, "The file %s doesn't exists\n",fname);
    $$$$$:   67-block  0
call    0 never executed
    #####:   68:       exit(0);
call    0 never executed
        -:   69:  }
    #####:   70:  return(fp);
    $$$$$:   70-block  0
        -:   71:}
        -:   72:
        -:   73:/**********************************************/
        -:   74:/* NAME:	get_char                      */
        -:   75:/* INPUT:       a pointer to char_stream      */
        -:   76:/* OUTPUT:      a character                   */
        -:   77:/**********************************************/
function get_char called 0 returned 0% blocks executed 0%
    #####:   78:char get_char(fp)
    $$$$$:   78-block  0
        -:   79:character_stream fp;
        -:   80:{ char ch;
    #####:   81:  ch=getc(fp);
    $$$$$:   81-block  0
call    0 never executed
    #####:   82:  return(ch);
        -:   83:}
        -:   84:
        -:   85:/***************************************************/
        -:   86:/* NAME:      unget_char                           */
        -:   87:/* INPUT:     a pointer to char_stream,a character */
        -:   88:/* OUTPUT:    a character                          */
        -:   89:/* DESCRIPTION:when unable to put back,return EOF  */
        -:   90:/***************************************************/
function unget_char called 0 returned 0% blocks executed 0%
    #####:   91:char unget_char(ch,fp)
    $$$$$:   91-block  0
        -:   92:character_stream fp;
        -:   93:char ch;
        -:   94:{ char c;
    #####:   95:  c=ungetc(ch,fp);
    $$$$$:   95-block  0
call    0 never executed
    #####:   96:  if(c ==EOF)
branch  0 never executed
branch  1 never executed
        -:   97:    {
    #####:   98:     return(c);
    $$$$$:   98-block  0
        -:   99:    }
        -:  100:  else
    #####:  101:     return(c);
    $$$$$:  101-block  0
        -:  102:}
        -:  103:
        -:  104:/* tokenizer.c code */
        -:  105:
        -:  106:
        -:  107:char buffer[81];  /* fixed array length MONI */ /* to store the token temporar */
        -:  108:
        -:  109:
        -:  110:static int is_spec_symbol();
        -:  111:static int is_token_end();
        -:  112:static unget_error();
        -:  113:static int is_keyword();
        -:  114:static int is_identifier();
        -:  115:static int is_num_constant();
        -:  116:static int is_char_constant();
        -:  117:static int is_str_constant();
        -:  118:static int is_comment();
        -:  119:static void print_spec_symbol();
        -:  120:
        -:  121:/********************************************************/
        -:  122:/* NAME:	open_token_stream                       */
        -:  123:/* INPUT:       a filename                              */
        -:  124:/* OUTPUT:      a pointer to a token_stream             */
        -:  125:/* DESCRIPTION: when filename is EMPTY,choice standard  */
        -:  126:/*              input device as input source            */
        -:  127:/********************************************************/
function open_token_stream called 0 returned 0% blocks executed 0%
    #####:  128:token_stream open_token_stream(fname)
    $$$$$:  128-block  0
        -:  129:char *fname;
        -:  130:{
        -:  131: token_stream fp;
    #####:  132: if(strcmp(fname,"")==0)
    $$$$$:  132-block  0
branch  0 never executed
branch  1 never executed
    #####:  133:    fp=open_character_stream(NULL);
    $$$$$:  133-block  0
call    0 never executed
        -:  134: else
    #####:  135:    fp=open_character_stream(fname);
    $$$$$:  135-block  0
call    0 never executed
    #####:  136: return(fp);
    $$$$$:  136-block  0
        -:  137:}
        -:  138:
        -:  139:/********************************************************/
        -:  140:/* NAME :	get_token                               */
        -:  141:/* INPUT: 	a pointer to the tokens_stream          */
        -:  142:/* OUTPUT:      a token                                 */
        -:  143:/* DESCRIPTION: according the syntax of tokens,dealing  */
        -:  144:/*              with different case  and get one token  */
        -:  145:/********************************************************/
function get_token called 0 returned 0% blocks executed 0%
    #####:  146:token get_token(tp)
    $$$$$:  146-block  0
        -:  147:token_stream tp;
        -:  148:{ 
    #####:  149:  int i=0,j;
    #####:  150:  int id=0;
        -:  151:  char ch,ch1[2];
    #####:  152:  for (j=0;j<=80;j++)          /* initial the buffer   */
    $$$$$:  152-block  0
    $$$$$:  152-block  1
    $$$$$:  152-block  2
branch  0 never executed
branch  1 never executed
    #####:  153:      { buffer[j]='\0';} 
    #####:  154:   ch1[0]='\0';
    #####:  155:   ch1[1]='\0';
    #####:  156:   ch=get_char(tp);
    $$$$$:  156-block  0
call    0 never executed
    #####:  157:   while(ch==' '||ch=='\n')      /* strip all blanks until meet characters */
    $$$$$:  157-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  157-block  1
branch  2 never executed
branch  3 never executed
        -:  158:      {
    #####:  159:       ch=get_char(tp);
    $$$$$:  159-block  0
call    0 never executed
        -:  160:      } 
    #####:  161:   buffer[i]=ch;
    #####:  162:   if(is_eof_token(buffer)==TRUE)return(buffer);
    $$$$$:  162-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  162-block  1
    #####:  163:   if(is_spec_symbol(buffer)==TRUE)return(buffer); 
    $$$$$:  163-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  163-block  1
    #####:  164:   if(ch =='"')id=1;    /* prepare for string */
    $$$$$:  164-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  164-block  1
    #####:  165:   if(ch ==59)id=2;    /* prepare for comment */
    $$$$$:  165-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  165-block  1
    #####:  166:   ch=get_char(tp);
    $$$$$:  166-block  0
call    0 never executed
        -:  167:
    #####:  168:   while (is_token_end(id,ch) == FALSE)/* until meet the end character */
    $$$$$:  168-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  169:   {
    #####:  170:       i++;
    #####:  171:       buffer[i]=ch;
    #####:  172:       ch=get_char(tp);
    $$$$$:  172-block  0
call    0 never executed
        -:  173:   }
    #####:  174:   ch1[0]=ch;                        /* hold the end charcater          */
    #####:  175:   if(is_eof_token(ch1)==TRUE)       /* if end character is eof token    */
    $$$$$:  175-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  176:      { ch=unget_char(ch,tp);        /* then put back eof on token_stream */
    $$$$$:  176-block  0
call    0 never executed
    #####:  177:        if(ch==EOF)unget_error(tp);
branch  0 never executed
branch  1 never executed
    $$$$$:  177-block  0
call    2 never executed
    #####:  178:        return(buffer);
    $$$$$:  178-block  0
        -:  179:      }
    #####:  180:   if(is_spec_symbol(ch1)==TRUE)     /* if end character is special_symbol */
    $$$$$:  180-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  181:      { ch=unget_char(ch,tp);        /* then put back this character       */
    $$$$$:  181-block  0
call    0 never executed
    #####:  182:        if(ch==EOF)unget_error(tp);
branch  0 never executed
branch  1 never executed
    $$$$$:  182-block  0
call    2 never executed
    #####:  183:        return(buffer);
    $$$$$:  183-block  0
        -:  184:      }
    #####:  185:   if(id==1)                  /* if end character is " and is string */
    $$$$$:  185-block  0
branch  0 never executed
branch  1 never executed
    #####:  186:     { i++;                     /* case,hold the second " in buffer    */
    #####:  187:       buffer[i]=ch;
    #####:  188:       return(buffer); 
    $$$$$:  188-block  0
        -:  189:     }
    #####:  190:   if(id==0 && ch==59)
    $$$$$:  190-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  190-block  1
branch  2 never executed
branch  3 never executed
        -:  191:                                   /* when not in string or comment,meet ";" */
    #####:  192:     { ch=unget_char(ch,tp);       /* then put back this character         */
    $$$$$:  192-block  0
call    0 never executed
    #####:  193:       if(ch==EOF)unget_error(tp);
branch  0 never executed
branch  1 never executed
    $$$$$:  193-block  0
call    2 never executed
    #####:  194:       return(buffer); 
    $$$$$:  194-block  0
        -:  195:     }
    #####:  196:  return(buffer);                   /* return nomal case token             */
    $$$$$:  196-block  0
    $$$$$:  196-block  1
        -:  197:}
        -:  198:
        -:  199:/*******************************************************/
        -:  200:/* NAME:	is_token_end                           */
        -:  201:/* INPUT:       a character,a token status             */
        -:  202:/* OUTPUT:	a BOOLEAN value                        */
        -:  203:/*******************************************************/
function is_token_end called 0 returned 0% blocks executed 0%
    #####:  204:static int is_token_end(str_com_id,ch)
    $$$$$:  204-block  0
        -:  205:char ch;
        -:  206:int str_com_id;
        -:  207:{ char ch1[2];  /* fixed array declaration MONI */
    #####:  208: ch1[0]=ch;
    #####:  209: ch1[1]='\0';
    #####:  210: if(is_eof_token(ch1)==TRUE)return(TRUE); /* is eof token? */
    $$$$$:  210-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  210-block  1
    #####:  211: if(str_com_id==1)          /* is string token */
    $$$$$:  211-block  0
branch  0 never executed
branch  1 never executed
    #####:  212:    { if(ch=='"' | ch=='\n')   /* for string until meet another " */
    $$$$$:  212-block  0
branch  0 never executed
branch  1 never executed
    #####:  213:         return(TRUE);
    $$$$$:  213-block  0
        -:  214:      else
    #####:  215:         return(FALSE);
    $$$$$:  215-block  0
        -:  216:    }
        -:  217:
    #####:  218: if(str_com_id==2)    /* is comment token */
    $$$$$:  218-block  0
branch  0 never executed
branch  1 never executed
    #####:  219:   { if(ch=='\n')     /* for comment until meet end of line */
    $$$$$:  219-block  0
branch  0 never executed
branch  1 never executed
    #####:  220:        return(TRUE);
    $$$$$:  220-block  0
        -:  221:      else
    #####:  222:        return(FALSE);
    $$$$$:  222-block  0
        -:  223:   }
        -:  224:
    #####:  225: if(is_spec_symbol(ch1)==TRUE) return(TRUE); /* is special_symbol? */
    $$$$$:  225-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  225-block  1
    #####:  226: if(ch ==' ' || ch=='\n' || ch==59) return(TRUE); 
    $$$$$:  226-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  226-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  226-block  2
branch  4 never executed
branch  5 never executed
    $$$$$:  226-block  3
        -:  227:                              /* others until meet blank or tab or 59 */
    #####:  228: return(FALSE);               /* other case,return FALSE */
    $$$$$:  228-block  0
    $$$$$:  228-block  1
        -:  229:}
        -:  230:
        -:  231:/****************************************************/
        -:  232:/* NAME :	token_type                          */
        -:  233:/* INPUT:       a pointer to the token              */
        -:  234:/* OUTPUT:      an integer value                    */
        -:  235:/* DESCRIPTION: the integer value is corresponding  */
        -:  236:/*              to the different token type         */
        -:  237:/****************************************************/
function token_type called 0 returned 0% blocks executed 0%
    #####:  238:static int token_type(tok)
    $$$$$:  238-block  0
        -:  239:token tok;
        -:  240:{ 
    #####:  241: if(is_keyword(tok))return(keyword);
    $$$$$:  241-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  241-block  1
    #####:  242: if(is_spec_symbol(tok))return(spec_symbol);
    $$$$$:  242-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  242-block  1
    #####:  243: if(is_identifier(tok))return(identifier);
    $$$$$:  243-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  243-block  1
    #####:  244: if(is_num_constant(tok))return(num_constant);
    $$$$$:  244-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  244-block  1
    #####:  245: if(is_str_constant(tok))return(str_constant);
    $$$$$:  245-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  245-block  1
    #####:  246: if(is_char_constant(tok))return(char_constant);
    $$$$$:  246-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  246-block  1
    #####:  247: if(is_comment(tok))return(comment);
    $$$$$:  247-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  247-block  1
    #####:  248: if(is_eof_token(tok))return(end);
    $$$$$:  248-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  248-block  1
    #####:  249: return(error);                    /* else look as error token */
    $$$$$:  249-block  0
        -:  250:}
        -:  251:
        -:  252:/****************************************************/
        -:  253:/* NAME:	print_token                         */
        -:  254:/* INPUT:	a pointer to the token              */
        -:  255:/* OUTPUT:      a BOOLEAN value,print out the token */
        -:  256:/*              according the forms required        */
        -:  257:/****************************************************/
function print_token called 0 returned 0% blocks executed 0%
    #####:  258:int print_token(tok)
    $$$$$:  258-block  0
        -:  259:token tok;
        -:  260:{ int type;
    #####:  261:  type=token_type(tok);
    $$$$$:  261-block  0
call    0 never executed
    #####:  262: if(type==error)
branch  0 never executed
branch  1 never executed
    #####:  263:   { fprintf(stdout, "error,\"%s\".\n",tok);
    $$$$$:  263-block  0
call    0 never executed
        -:  264:   } 
    #####:  265: if(type==keyword)
    $$$$$:  265-block  0
branch  0 never executed
branch  1 never executed
    #####:  266:   {fprintf(stdout, "keyword,\"%s\".\n",tok);
    $$$$$:  266-block  0
call    0 never executed
        -:  267:   }
    #####:  268: if(type==spec_symbol)print_spec_symbol(tok);
    $$$$$:  268-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  268-block  1
call    2 never executed
    #####:  269: if(type==identifier)
    $$$$$:  269-block  0
branch  0 never executed
branch  1 never executed
    #####:  270:   {fprintf(stdout, "identifier,\"%s\".\n",tok);
    $$$$$:  270-block  0
call    0 never executed
        -:  271:   }
    #####:  272: if(type==num_constant)
    $$$$$:  272-block  0
branch  0 never executed
branch  1 never executed
    #####:  273:   {fprintf(stdout, "numeric,%s.\n",tok);
    $$$$$:  273-block  0
call    0 never executed
        -:  274:   }
    #####:  275: if(type==str_constant)
    $$$$$:  275-block  0
branch  0 never executed
branch  1 never executed
    #####:  276:   {fprintf(stdout, "string,%s.\n",tok);
    $$$$$:  276-block  0
call    0 never executed
        -:  277:   }
    #####:  278: if(type==char_constant)
    $$$$$:  278-block  0
branch  0 never executed
branch  1 never executed
    #####:  279:   {tok=tok+1;
    #####:  280:    fprintf(stdout, "character,\"%s\".\n",tok);
    $$$$$:  280-block  0
call    0 never executed
        -:  281:   }
    #####:  282: if(type==end) 
    $$$$$:  282-block  0
branch  0 never executed
branch  1 never executed
    #####:  283:   fprintf(stdout, "eof.\n");
    $$$$$:  283-block  0
call    0 never executed
    #####:  284:   }
        -:  285:
        -:  286:/* the code for tokens judgment function */
        -:  287:
        -:  288:/*************************************/
        -:  289:/* NAME:	is_eof_token         */
        -:  290:/* INPUT: 	a pointer to a token */
        -:  291:/* OUTPUT:      a BOOLEAN value      */
        -:  292:/*************************************/
function is_eof_token called 0 returned 0% blocks executed 0%
    #####:  293:int is_eof_token(tok)
    $$$$$:  293-block  0
        -:  294:token tok;
        -:  295:{ 
    #####:  296:  if( *tok==EOF)
    $$$$$:  296-block  0
branch  0 never executed
branch  1 never executed
    #####:  297:      return(TRUE);
    $$$$$:  297-block  0
        -:  298:  else
    #####:  299:      return(FALSE);
    $$$$$:  299-block  0
        -:  300:}
        -:  301:
        -:  302:/*************************************/
        -:  303:/* NAME:	is_comment           */
        -:  304:/* INPUT: 	a pointer to a token */
        -:  305:/* OUTPUT:      a BOOLEAN value      */
        -:  306:/*************************************/
function is_comment called 0 returned 0% blocks executed 0%
    #####:  307:static int is_comment(ident)
    $$$$$:  307-block  0
        -:  308:token ident;
        -:  309:{
    #####:  310:  if( (*ident) ==59 )   /* the char is 59   */
    $$$$$:  310-block  0
branch  0 never executed
branch  1 never executed
    #####:  311:     return(TRUE);
    $$$$$:  311-block  0
        -:  312:  else
    #####:  313:     return(FALSE);
    $$$$$:  313-block  0
        -:  314:}
        -:  315:
        -:  316:/*************************************/
        -:  317:/* NAME:	is_keyword           */
        -:  318:/* INPUT: 	a pointer to a token */
        -:  319:/* OUTPUT:      a BOOLEAN value      */
        -:  320:/*************************************/
function is_keyword called 0 returned 0% blocks executed 0%
    #####:  321:static int is_keyword(str)
    $$$$$:  321-block  0
        -:  322:    token  str;
        -:  323:{ 
    #####:  324: if (!strcmp(str,"and") || !strcmp(str,"or") || !strcmp(str,"if") ||
    $$$$$:  324-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  324-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  324-block  2
branch  4 never executed
branch  5 never executed
    $$$$$:  324-block  3
branch  6 never executed
branch  7 never executed
    #####:  325:    !strcmp(str,"xor")||!strcmp(str,"lambda")||!strcmp(str,"=>"))
    $$$$$:  325-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  325-block  1
branch  2 never executed
branch  3 never executed
    #####:  326:      return(TRUE);
    $$$$$:  326-block  0
        -:  327:  else 
    #####:  328:      return(FALSE);
    $$$$$:  328-block  0
        -:  329:}
        -:  330:
        -:  331:/*************************************/
        -:  332:/* NAME:	is_char_constant     */
        -:  333:/* INPUT: 	a pointer to a token */
        -:  334:/* OUTPUT:      a BOOLEAN value      */
        -:  335:/*************************************/
function is_char_constant called 0 returned 0% blocks executed 0%
    #####:  336:static int is_char_constant(str)
    $$$$$:  336-block  0
        -:  337:    token str;
        -:  338:{
    #####:  339:  if ((*str)=='#' && isalpha(*(str+1)))
    $$$$$:  339-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  339-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  340:     return(TRUE);
    $$$$$:  340-block  0
        -:  341:  else  
    #####:  342:     return(FALSE);
    $$$$$:  342-block  0
        -:  343:}
        -:  344:
        -:  345:/*************************************/
        -:  346:/* NAME:	is_num_constant      */
        -:  347:/* INPUT: 	a pointer to a token */
        -:  348:/* OUTPUT:      a BOOLEAN value      */
        -:  349:/*************************************/
function is_num_constant called 0 returned 0% blocks executed 0%
    #####:  350:static int is_num_constant(str)
    $$$$$:  350-block  0
        -:  351:    token  str;
        -:  352:{
    #####:  353:  int i=1;
        -:  354:  
    #####:  355:  if ( isdigit(*str)) 
    $$$$$:  355-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  356:    {
    #####:  357:    while ( *(str+i) != '\0' )   /* until meet token end sign */
    $$$$$:  357-block  0
    $$$$$:  357-block  1
branch  0 never executed
branch  1 never executed
        -:  358:      {
    #####:  359:       if(isdigit(*(str+i)))
    $$$$$:  359-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  360:         i++;
    $$$$$:  360-block  0
        -:  361:       else
    #####:  362:         return(FALSE);
    $$$$$:  362-block  0
        -:  363:      }                         /* end WHILE */
    #####:  364:    return(TRUE);
    $$$$$:  364-block  0
        -:  365:    }
        -:  366:  else
    #####:  367:   return(FALSE);               /* other return FALSE */
    $$$$$:  367-block  0
        -:  368:}
        -:  369:
        -:  370:/*************************************/
        -:  371:/* NAME:	is_str_constant      */
        -:  372:/* INPUT: 	a pointer to a token */
        -:  373:/* OUTPUT:      a BOOLEAN value      */
        -:  374:/*************************************/
function is_str_constant called 0 returned 0% blocks executed 0%
    #####:  375:static int is_str_constant(str)
    $$$$$:  375-block  0
        -:  376:    token str;
        -:  377:{
    #####:  378:  int i=1;
        -:  379: 
    #####:  380:  if ( *str =='"')
    $$$$$:  380-block  0
branch  0 never executed
branch  1 never executed
    #####:  381:     { while (*(str+i)!='\0')  /* until meet the token end sign */
    $$$$$:  381-block  0
    $$$$$:  381-block  1
branch  0 never executed
branch  1 never executed
    #####:  382:         { if(*(str+i)=='"')
    $$$$$:  382-block  0
branch  0 never executed
branch  1 never executed
    #####:  383:             return(TRUE);        /* meet the second '"'           */
    $$$$$:  383-block  0
        -:  384:           else
    #####:  385:           i++;
    $$$$$:  385-block  0
        -:  386:         }               /* end WHILE */
    #####:  387:     return(FALSE);
    $$$$$:  387-block  0
        -:  388:    }
        -:  389:  else
    #####:  390:    return(FALSE);       /* other return FALSE */
    $$$$$:  390-block  0
        -:  391:}
        -:  392:/*************************************/
        -:  393:/* NAME:	is_identifier         */
        -:  394:/* INPUT: 	a pointer to a token */
        -:  395:/* OUTPUT:      a BOOLEAN value      */
        -:  396:/*************************************/
function is_identifier called 0 returned 0% blocks executed 0%
    #####:  397:static int is_identifier(str)
    $$$$$:  397-block  0
        -:  398:    token  str;
        -:  399:{
    #####:  400:  int i=1;
        -:  401:
    #####:  402:  if ( isalpha( *str) ) 
    $$$$$:  402-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  403:     {
    #####:  404:        while(  *(str+i) !='\0' )   /* unti meet the end token sign */
    $$$$$:  404-block  0
    $$$$$:  404-block  1
branch  0 never executed
branch  1 never executed
        -:  405:           { 
    #####:  406:            if(isalpha(*(str+i)) || isdigit(*(str+i)))   
    $$$$$:  406-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  406-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  407:               i++;
    $$$$$:  407-block  0
        -:  408:            else
    #####:  409:               return(FALSE);
    $$$$$:  409-block  0
        -:  410:           }      /* end WHILE */
    #####:  411:     return(TRUE);
    $$$$$:  411-block  0
        -:  412:     }
        -:  413:  else
    #####:  414:     return(FALSE);
    $$$$$:  414-block  0
        -:  415:}
        -:  416:
        -:  417:/******************************************/
        -:  418:/* NAME:	unget_error               */
        -:  419:/* INPUT:       a pointer to token stream */
        -:  420:/* OUTPUT: 	print error message       */
        -:  421:/******************************************/
function unget_error called 0 returned 0% blocks executed 0%
    #####:  422:static unget_error(fp)
    $$$$$:  422-block  0
        -:  423:character_stream *fp;
        -:  424:{
    #####:  425:fprintf(stdout,"It can not get charcter\n");
    $$$$$:  425-block  0
call    0 never executed
    #####:  426:}
        -:  427:
        -:  428:/*************************************************/
        -:  429:/* NAME:        print_spec_symbol                */
        -:  430:/* INPUT:       a pointer to a spec_symbol token */
        -:  431:/* OUTPUT :     print out the spec_symbol token  */
        -:  432:/*              according to the form required   */
        -:  433:/*************************************************/
function print_spec_symbol called 0 returned 0% blocks executed 0%
    #####:  434:static void print_spec_symbol(str)
    $$$$$:  434-block  0
        -:  435:token str;
        -:  436:{
    #####:  437:    if      (!strcmp(str,"("))
    $$$$$:  437-block  0
branch  0 never executed
branch  1 never executed
        -:  438:    {
    #####:  439:             fprintf(stdout, "%s\n","lparen.");
    $$$$$:  439-block  0
call    0 never executed
    #####:  440:             return;
        -:  441:    } 
    #####:  442:    if (!strcmp(str,")"))
    $$$$$:  442-block  0
branch  0 never executed
branch  1 never executed
        -:  443:    {
    #####:  444:             fprintf(stdout, "%s\n","rparen.");
    $$$$$:  444-block  0
call    0 never executed
    #####:  445:             return;
        -:  446:    }
    #####:  447:    if (!strcmp(str,"["))
    $$$$$:  447-block  0
branch  0 never executed
branch  1 never executed
        -:  448:    {
    #####:  449:             fprintf(stdout, "%s\n","lsquare.");
    $$$$$:  449-block  0
call    0 never executed
    #####:  450:             return;
        -:  451:    }
    #####:  452:    if (!strcmp(str,"]"))
    $$$$$:  452-block  0
branch  0 never executed
branch  1 never executed
        -:  453:    {
    #####:  454:             fprintf(stdout, "%s\n","rsquare.");
    $$$$$:  454-block  0
call    0 never executed
    #####:  455:             return;
        -:  456:    }
    #####:  457:    if (!strcmp(str,"'"))
    $$$$$:  457-block  0
branch  0 never executed
branch  1 never executed
        -:  458:    {
    #####:  459:             fprintf(stdout, "%s\n","quote.");
    $$$$$:  459-block  0
call    0 never executed
    #####:  460:             return;
        -:  461:    }
    #####:  462:    if (!strcmp(str,"`"))
    $$$$$:  462-block  0
branch  0 never executed
branch  1 never executed
        -:  463:    {
    #####:  464:             fprintf(stdout, "%s\n","bquote.");
    $$$$$:  464-block  0
call    0 never executed
    #####:  465:             return;
        -:  466:    }
        -:  467:    
    #####:  468:             fprintf(stdout, "%s\n","comma.");
    $$$$$:  468-block  0
call    0 never executed
        -:  469:}
        -:  470:
        -:  471:
        -:  472:/*************************************/
        -:  473:/* NAME:        is_spec_symbol       */
        -:  474:/* INPUT:       a pointer to a token */
        -:  475:/* OUTPUT:      a BOOLEAN value      */
        -:  476:/*************************************/
function is_spec_symbol called 0 returned 0% blocks executed 0%
    #####:  477:static int is_spec_symbol(str)
    $$$$$:  477-block  0
        -:  478:    token str;
        -:  479:{
    #####:  480:    if (!strcmp(str,"("))
    $$$$$:  480-block  0
branch  0 never executed
branch  1 never executed
        -:  481:    {  
    #####:  482:        return(TRUE);
    $$$$$:  482-block  0
        -:  483:    }
    #####:  484:    if (!strcmp(str,")"))
    $$$$$:  484-block  0
branch  0 never executed
branch  1 never executed
        -:  485:    {
    #####:  486:        return(TRUE);
    $$$$$:  486-block  0
        -:  487:    }
    #####:  488:    if (!strcmp(str,"["))
    $$$$$:  488-block  0
branch  0 never executed
branch  1 never executed
        -:  489:    {
    #####:  490:        return(TRUE);
    $$$$$:  490-block  0
        -:  491:    }
    #####:  492:    if (!strcmp(str,"]"))
    $$$$$:  492-block  0
branch  0 never executed
branch  1 never executed
        -:  493:    {
    #####:  494:        return(TRUE);
    $$$$$:  494-block  0
        -:  495:    }
    #####:  496:    if (!strcmp(str,"'"))
    $$$$$:  496-block  0
branch  0 never executed
branch  1 never executed
        -:  497:    {
    #####:  498:        return(TRUE);
    $$$$$:  498-block  0
        -:  499:    }
    #####:  500:    if (!strcmp(str,"`"))
    $$$$$:  500-block  0
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:        return(TRUE);
    $$$$$:  502-block  0
        -:  503:    }
    #####:  504:    if (!strcmp(str,","))
    $$$$$:  504-block  0
branch  0 never executed
branch  1 never executed
        -:  505:    {
    #####:  506:        return(TRUE);
    $$$$$:  506-block  0
        -:  507:    }
    #####:  508:    return(FALSE);     /* others return FALSE */
    $$$$$:  508-block  0
        -:  509:}
        -:  510:
        -:  511:
